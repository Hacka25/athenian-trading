plugins {
    id 'java'
    id 'application'
    id 'maven'  // Required for jitpack.io to do a ./gradlew install
    id 'org.jetbrains.kotlin.jvm' version '1.4.21'
    id "com.github.ben-manes.versions" version '0.36.0'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

repositories {
    maven { url 'https://kotlin.bintray.com/ktor' }
    maven { url 'https://kotlin.bintray.com/kotlinx' }
    maven { url 'https://kotlin.bintray.com/kotlin-js-wrappers' }
    maven { url 'https://maven-central.storage-download.googleapis.com/repos/central/data/' }
    jcenter()
    maven { url = 'https://jitpack.io' }
}

// These are for the uber target
def mainName = "com.github.pambrose.TradingServer"
def appName = 'server'

// This is for ./gradlew run
application {
    mainClassName = mainName
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

description = 'Athenian Trading'
group 'com.github.pambrose'
version '0.0.1'

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://kotlin.bintray.com/ktor' }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"

    implementation "org.jetbrains:kotlin-css:$css_version"
    implementation "org.jetbrains:kotlin-css-jvm:$css_version"

    implementation "io.ktor:ktor-server-cio:$ktor_version"
    implementation "io.ktor:ktor-server-core:$ktor_version"

    implementation "io.ktor:ktor-server-sessions:$ktor_version"
    implementation "io.ktor:ktor-html-builder:$ktor_version"
    implementation "io.ktor:ktor-locations:$ktor_version"
    implementation "io.ktor:ktor-metrics:$ktor_version"

    implementation "com.google.api-client:google-api-client:$api_client_version"
    implementation "com.google.oauth-client:google-oauth-client-jetty:$client_jetty_version"
    implementation "com.google.apis:google-api-services-sheets:$services_sheets_version"

    implementation "com.github.pambrose.common-utils:core-utils:$utils_version"
    implementation "com.github.pambrose.common-utils:ktor-server-utils:$utils_version"

    implementation "io.github.microutils:kotlin-logging:$logging_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"

    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
}

task stage(dependsOn: ['uberjar', 'build', 'clean'])
build.mustRunAfter clean

task uberjar(type: Jar, dependsOn: shadowJar) {
    zip64 true
    archiveFileName = 'server.jar'
    manifest {
        attributes('Implementation-Title': appName)
        attributes('Implementation-Version': version)
        attributes('Built-Date': new Date())
        attributes('Built-JDK': System.getProperty('java.version'))
        attributes('Main-Class': mainName)
    }
    from zipTree(shadowJar.archiveFile)
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
    kotlinOptions.freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                                       '-Xuse-experimental=io.ktor.util.KtorExperimentalAPI',
                                       '-Xuse-experimental=io.ktor.locations.KtorExperimentalLocationsAPI',
                                       '-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi',
                                       '-Xuse-experimental=kotlin.ExperimentalStdlibApi',
                                       '-Xuse-experimental=kotlin.contracts.ExperimentalContracts',
                                       '-XXLanguage:+InlineClasses']
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
    kotlinOptions.freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                                       '-Xuse-experimental=io.ktor.util.KtorExperimentalAPI',
                                       '-Xuse-experimental=io.ktor.locations.KtorExperimentalLocationsAPI',
                                       '-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi',
                                       '-Xuse-experimental=kotlin.ExperimentalStdlibApi',
                                       '-XXLanguage:+InlineClasses']
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showStandardStreams = true
    }
}